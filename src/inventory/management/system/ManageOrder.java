/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventory.management.system;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import comm.OpenPdf;
import static comm.OpenPdf.OpenById;
import dao.ConnectionProvider;
import dao.InventoryUtils;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author justine
 */
public class ManageOrder extends javax.swing.JFrame {

    private int customerPk = 0;
    private int productPk = 0;
    private int finalTotalPrice = 0;
    private String orderId = "";
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;

    /**
     * Creates new form ManageProduct
     */
    public ManageOrder() {
        initComponents();
        table_update();
    }

    private void clearProductFields() {
        productPk = 0;
        txtproductname.setText("");
        txtprice.setText("");
        txtdesc.setText("");
        txtqty.setText("");
    }

    private String getUniqueId(String prefix) {
        return prefix + System.nanoTime();
    }

    private void table_update() {
        txtcustomername.setEditable(false);
        txtphone.setEditable(false);
        txtemail.setEditable(false);

        txtproductname.setEditable(false);
        txtprice.setEditable(false);
        txtdesc.setEditable(false);
        txtqty.setEditable(true);
        // updating customer table
        DefaultTableModel model = (DefaultTableModel) tablecustomer.getModel();

        conn = ConnectionProvider.getConn();
        try {
            pst = conn.prepareStatement("select * from customer");
            rs = pst.executeQuery();

            model.setRowCount(0);
            while (rs.next()) {
                Vector v2 = new Vector();
                v2.add(rs.getString("customer_pk"));
                v2.add(rs.getString("name"));
                v2.add(rs.getString("mobileNumber"));
                v2.add(rs.getString("email"));
                model.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pst.close();
            } catch (SQLException ex) {
                Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // updating product table
        DefaultTableModel model2 = (DefaultTableModel) tableproduct.getModel();

        try {
            pst = conn.prepareStatement("select * from product");
            rs = pst.executeQuery();

            model2.setRowCount(0);
            while (rs.next()) {
                Vector v2 = new Vector();
                v2.add(rs.getString("product_pk"));
                v2.add(rs.getString("name"));
                v2.add(rs.getString("price"));
                v2.add(rs.getString("qty"));
                v2.add(rs.getString("description"));
                v2.add(rs.getString("category_fk"));
                v2.add(rs.getString("categoryName"));
                model2.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pst.close();
            } catch (SQLException ex) {
                Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablecustomer = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableproduct = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablecart = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtcustomername = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtphone = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtemail = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtproductname = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtprice = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtdesc = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtqty = new javax.swing.JTextField();
        btnaddtocart = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        lbfinaltotalprice = new javax.swing.JLabel();
        btnclose = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        btnreset = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Impact", 1, 36)); // NOI18N
        jLabel1.setText("Manage Order");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, -1, -1));

        tablecustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Mobile Number", "Email"
            }
        ));
        tablecustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablecustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablecustomer);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 360, 290));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Product List");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Cart");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 70, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Customer List");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, -1, -1));

        tableproduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Qty", "Description", "CategoryID", "CategoryName"
            }
        ));
        tableproduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableproductMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableproduct);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, 490, 290));

        tablecart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "Name", "Qty", "Price", "Description", "Sub Total"
            }
        ));
        tablecart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablecartMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablecart);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 110, -1, 290));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Selected Customer:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Name");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, -1, -1));

        txtcustomername.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(txtcustomername, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 360, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Mobile Number");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, -1, -1));

        txtphone.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(txtphone, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 360, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Email");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, -1, -1));

        txtemail.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(txtemail, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 620, 360, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Selected Product:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Product Name");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 450, -1, -1));

        txtproductname.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(txtproductname, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 480, 480, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("Product Price");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 520, -1, -1));

        txtprice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(txtprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 550, 480, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Product Description");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 590, -1, -1));

        txtdesc.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(txtdesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 620, 480, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("Order Quantity");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 660, -1, -1));

        txtqty.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(txtqty, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 690, 480, -1));

        btnaddtocart.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnaddtocart.setText("Add to cart");
        btnaddtocart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddtocartActionPerformed(evt);
            }
        });
        getContentPane().add(btnaddtocart, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 730, 480, -1));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setText("Total Amount RS:");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 420, -1, -1));

        lbfinaltotalprice.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbfinaltotalprice.setText("00000");
        getContentPane().add(lbfinaltotalprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 420, -1, -1));

        btnclose.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnclose.setText("Close");
        btnclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnclose, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 620, 450, -1));

        btnsave.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnsave.setText("Save Order Details");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnsave, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 480, 450, -1));

        btnreset.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnreset.setText("Reset");
        getContentPane().add(btnreset, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 550, 450, -1));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Orders_background.png"))); // NOI18N
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // populating fields from table rows
    private void tablecustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablecustomerMouseClicked
        // customer fields
        int selectIndex = tablecustomer.getSelectedRow();

        DefaultTableModel model = (DefaultTableModel) tablecustomer.getModel();

        String customerID = model.getValueAt(selectIndex, 0).toString();
        String customerName = model.getValueAt(selectIndex, 1).toString();
        String phone = model.getValueAt(selectIndex, 2).toString();
        String email = model.getValueAt(selectIndex, 3).toString();

        customerPk = Integer.parseInt(customerID);
        txtcustomername.setText(customerName);
        txtphone.setText(phone);
        txtemail.setText(email);

        txtcustomername.setEditable(false);
        txtphone.setEditable(false);
        txtemail.setEditable(false);
    }//GEN-LAST:event_tablecustomerMouseClicked

    private void btncloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncloseActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btncloseActionPerformed

    // populate fields
    private void tableproductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableproductMouseClicked
        // TODO add your handling code here:
        // product fields
        int selectIndex2 = tableproduct.getSelectedRow();

        DefaultTableModel model2 = (DefaultTableModel) tableproduct.getModel();

        String productID = model2.getValueAt(selectIndex2, 0).toString();
        String productName = model2.getValueAt(selectIndex2, 1).toString();
        String price = model2.getValueAt(selectIndex2, 2).toString();
        //String qty = model2.getValueAt(selectIndex2, 3).toString();
        String desc = model2.getValueAt(selectIndex2, 4).toString();

        productPk = Integer.parseInt(productID);
        txtproductname.setText(productName);
        txtprice.setText(price);
        txtdesc.setText(desc);
        //txtqty.setText(qty);

        txtproductname.setEditable(false);
        txtprice.setEditable(false);
        txtdesc.setEditable(false);
        txtqty.setEditable(true);
    }//GEN-LAST:event_tableproductMouseClicked

    // add to cart button
    private void btnaddtocartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddtocartActionPerformed
        // TODO add your handling code here:
        String qty = txtqty.getText();

        if (!qty.equals("")) {
            String name = txtproductname.getText();
            String priceText = txtprice.getText();
            String desc = txtdesc.getText();

            int subTotal = Integer.parseInt(priceText) * Integer.parseInt(qty);

            int checkStock = 0;
            int checkProductAlreadyExistInCart = 0;

            conn = ConnectionProvider.getConn();
            try {
                pst = conn.prepareStatement("select * from product where product_pk=?");
                pst.setInt(1, productPk);

                rs = pst.executeQuery();

                while (rs.next()) {
                    if (rs.getInt("qty") >= Integer.parseInt(qty)) {
                        checkStock = 1;
                    } else {
                        JOptionPane.showMessageDialog(null, "Product out of stock. Available quantity is " + rs.getString("qty"));
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (checkStock == 1) {
                DefaultTableModel model = (DefaultTableModel) tablecart.getModel();
                if (tablecart.getRowCount() != 0) {
                    for (int i = 0; i < tablecart.getRowCount(); i++) {
                        int insertedProductPk = Integer.parseInt(model.getValueAt(i, 0).toString());
                        if (insertedProductPk == productPk) {
                            checkProductAlreadyExistInCart = 1;
                        }
                    }
                }
                if (checkProductAlreadyExistInCart == 0) {
                    model.addRow(new Object[]{productPk, name, qty, priceText, desc, subTotal});
                    finalTotalPrice += subTotal;
                    lbfinaltotalprice.setText(String.valueOf(finalTotalPrice));
                    JOptionPane.showMessageDialog(null, "Added to cart successefully");
                } else {
                    JOptionPane.showMessageDialog(null, "Product Already Exists In Cart");
                }
                clearProductFields();
            }

        } else {
            JOptionPane.showMessageDialog(null, " quantity and product fields are required");
        }


    }//GEN-LAST:event_btnaddtocartActionPerformed

    private void tablecartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablecartMouseClicked
        // TODO add your handling code here:
        int selectIndex = tablecart.getSelectedRow();
        int a = JOptionPane.showConfirmDialog(null, "Do you want to remove this item from cart?", "select", JOptionPane.YES_NO_OPTION);

        if (a == 0) {
            DefaultTableModel model = (DefaultTableModel) tablecart.getModel();

            String subTotal = model.getValueAt(selectIndex, 5).toString();
            finalTotalPrice -= Integer.parseInt(subTotal);
            lbfinaltotalprice.setText(String.valueOf(finalTotalPrice));

            model.removeRow(selectIndex); // removing the selected row
        }

        txtproductname.setEditable(false);
        txtprice.setEditable(false);
        txtdesc.setEditable(false);
        txtqty.setEditable(false);

    }//GEN-LAST:event_tablecartMouseClicked

    // save order details button
    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        // TODO add your handling code here:
        if (finalTotalPrice != 0 && !txtcustomername.getText().isEmpty()) {
            orderId = getUniqueId("Bill-");
            DefaultTableModel model = (DefaultTableModel) tablecart.getModel();
            if (model.getRowCount() != 0) {
                for (int i = 0; i < model.getRowCount(); i++) {
                    try {
                        conn = ConnectionProvider.getConn();
                        pst = conn.prepareStatement("update product set qty=qty-" + Integer.parseInt(model.getValueAt(i, 2).toString()) + " where product_pk=" + Integer.parseInt(model.getValueAt(i, 0).toString()));
                        pst.executeUpdate();

                    } catch (SQLException ex) {
                        Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            try {
                SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
                Calendar cal = Calendar.getInstance();
                
                conn = ConnectionProvider.getConn();
                pst = conn.prepareStatement("insert into orderDetails(orderId, customer_fk, orderDate, totalPaid) values (?,?,?,?)");
                pst.setString(1, orderId);
                pst.setInt(2, customerPk);
                pst.setString(3, myFormat.format(cal.getTime()));
                pst.setInt(4, finalTotalPrice);
                pst.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            // creating Document
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            
            try {
                SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
                Calendar cal = Calendar.getInstance();
                
                PdfWriter.getInstance(doc, new FileOutputStream(InventoryUtils.billPath+""+orderId+".pdf"));
                doc.open();
                Paragraph projectName = new Paragraph("                                    Inventoey Management System                                    \n");
                doc.add(projectName);
                Paragraph starLine = new Paragraph("************************************************************************************************************");
                doc.add(starLine);
                Paragraph details = new Paragraph("\tOrderID: "+orderId + "\nDate: "+myFormat.format(cal.getTime())+"\nTotal Paid: "+finalTotalPrice);
                doc.add(details);
                doc.add(starLine);
                PdfPTable tb1 = new PdfPTable(5);
                PdfPCell nameCell = new PdfPCell(new Phrase("Name"));
                PdfPCell descCell = new PdfPCell(new Phrase("Description"));
                PdfPCell priceCell = new PdfPCell(new Phrase("Price per Unit"));
                PdfPCell qtyCell = new PdfPCell(new Phrase("Quantity"));
                PdfPCell subTotalCell = new PdfPCell(new Phrase("SubTotal"));
                
                BaseColor backgroundColor = new BaseColor(255, 204, 51);
                nameCell.setBackgroundColor(backgroundColor);
                descCell.setBackgroundColor(backgroundColor);
                priceCell.setBackgroundColor(backgroundColor);
                qtyCell.setBackgroundColor(backgroundColor);
                subTotalCell.setBackgroundColor(backgroundColor);
                
                tb1.addCell(nameCell);
                tb1.addCell(descCell);
                tb1.addCell(priceCell);
                tb1.addCell(qtyCell);
                tb1.addCell(subTotalCell);
                
                for(int i = 0; i<model.getRowCount(); i++){
                    tb1.addCell(model.getValueAt(i, 1).toString());
                    tb1.addCell(model.getValueAt(i, 4).toString());
                    tb1.addCell(model.getValueAt(i, 3).toString());
                    tb1.addCell(model.getValueAt(i, 2).toString());
                    tb1.addCell(model.getValueAt(i, 5).toString());
                }
                
                doc.add(tb1);
                doc.add(starLine);
                Paragraph thanksMsg = new Paragraph("Thank you, Please visit again");
                doc.add(thanksMsg);
                
                // open pdf
                OpenPdf.OpenById(orderId);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(ManageOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
            doc.close(); // closing the document after adding our deteails
            ManageOrder mgorder = new ManageOrder();
            this.setVisible(false);
            mgorder.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please ensure to select customer, product(s) and add to cart");
        }
    }//GEN-LAST:event_btnsaveActionPerformed

    private boolean validateFields(String formType) {
        if (formType.equals("edit") && !txtcustomername.getText().equals("") && !txtemail.getText().equals("") && !txtphone.getText().equals("")) {
            return false;
        } else if (formType.equals("new") && !txtcustomername.getText().equals("") && !txtemail.getText().equals("") && !txtphone.getText().equals("")) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnaddtocart;
    private javax.swing.JButton btnclose;
    private javax.swing.JButton btnreset;
    private javax.swing.JButton btnsave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbfinaltotalprice;
    private javax.swing.JTable tablecart;
    private javax.swing.JTable tablecustomer;
    private javax.swing.JTable tableproduct;
    private javax.swing.JTextField txtcustomername;
    private javax.swing.JTextField txtdesc;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txtphone;
    private javax.swing.JTextField txtprice;
    private javax.swing.JTextField txtproductname;
    private javax.swing.JTextField txtqty;
    // End of variables declaration//GEN-END:variables
}
